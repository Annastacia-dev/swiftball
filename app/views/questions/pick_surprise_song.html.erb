<div class="min-h-screen px-5">

  <div class="">
    <%= render 'components/breadcrumb', breadcrumbs: [
      {text: 'home', path: root_path},
      {text: "#{@quiz.title} quiz", path: quiz_path(@quiz)},
      {text: "Questions", path: quiz_questions_path(@quiz)},
      {text: "#{@question.content}"}
    ] %>
  </div>

  <div class="flex justify-between items-center px-5">
    <h5 class="font-semibold font-courier uppercase text-md "><%= @question.content %> </h5>
  </div>

  <%= form_with(url: surprise_song_answer_quiz_question_path(@quiz.id, @question.id), method: :post, local: true) do |f| %>
    <div id="album-song" class="album-song-fields mt-10 grid grid-cols-2 gap-2 font-light mb-10 lg:w-3/4 px-5 capitalize " data-content="<%= @question.id %>" data-mashup="<%= @mashup_ans %>">
    </div>
    <%= f.submit 'Submit', class: "dark:bg-black/95 bg-gray-200 px-4 py-2 rounded font-semibold cursor-pointer mt-10 ml-5 w-1/4" %>
  <% end %>
</div>

<script>
  document.addEventListener("turbo:load", () => {

  const element = document.getElementById("album-song")
  updateAlbumsongSelects(element)

    function updateAlbumsongSelects(selectedElement) {
      const mashupType = selectedElement.dataset.mashup.toLowerCase();
      const container = selectedElement
      const questionId = selectedElement.dataset.content
      let numberOfFields;

      switch (mashupType) {
        case 'no mashup':
          numberOfFields = 1;
          break;
        case 'mashup (2 songs) ':
          numberOfFields = 2;
          break;
        case 'mashup (3 songs)':
          numberOfFields = 3;
          break;
        case 'mashup (4+ songs)':
          numberOfFields = 4;
          break;
        default:
          numberOfFields = 1;
      }

      container.innerHTML = '';

      const albumsPromise = getAlbums()

      for (let i = 0; i < numberOfFields; i++) {
        const albumSelect = document.createElement('select');
        albumSelect.name = `albums_${i}[${questionId}]`;

        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        if (mashupType === 'no mashup'){
          defaultOption.text = 'Select Album'
        } else {
          defaultOption.text = `Select Album ${i + 1}`
        }
        defaultOption.disabled = true;
        defaultOption.selected = true;
        albumSelect.appendChild(defaultOption);
        albumSelect.required = true;

        albumSelect.classList.add('capitalize');
        albumSelect.classList.add('dark:bg-black');
        albumsPromise.then(albums => {
          albums.forEach(album => {
            const option = document.createElement('option');
            option.value = album.id;
            option.text = album.title;
            albumSelect.appendChild(option);
          });
        }).catch(error => {
          // console.error('Error fetching albums:', error);
        });

        const songSelect = document.createElement('select');

        const defaultSongOption = document.createElement('option');
        defaultSongOption.value = '';

        if (mashupType === 'no mashup'){
          defaultSongOption.text = 'Select  Song'
        } else {
          defaultSongOption.text = `Select Song ${i + 1}`
        }
        defaultSongOption.disabled = true;
        defaultSongOption.selected = true;

        songSelect.appendChild(defaultSongOption);
        songSelect.name = `songs_${i}[${questionId}]`;
        songSelect.classList.add('capitalize');
        songSelect.classList.add('dark:bg-black');
        songSelect.required = true;

        albumSelect.addEventListener('change', async (event) => {
          const selectedAlbumId = event.target.value;
          if (selectedAlbumId) {
            try {
              const songs = await getSongs(selectedAlbumId);
              updateSongOptions(songs, songSelect);
            } catch (error) {
              // console.error('Error fetching songs:', error);
            }
          } else {
            // Clear songSelect options if no album is selected
            songSelect.innerHTML = '';
            songSelect.appendChild(defaultSongOption);
          }
        });

        container.appendChild(albumSelect);
        container.appendChild(songSelect);

      }

    }


    // Fetch albums data from your server or API
      function getAlbums() {
        return fetch('/albums', {
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
          }
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            return data;
          })
          .catch(error => {
            // console.error('Error fetching albums:', error);
          });
      }

      // Function to fetch songs for a given album ID
      async function getSongs(albumId) {
        const response = await fetch(`/albums/${albumId}/songs`, {
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
          }
        });
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        return data;
      }

      // Function to update songSelect options based on fetched songs
      function updateSongOptions(songs, songSelect) {
        songSelect.innerHTML = '';
        songs.forEach(song => {
          const option = document.createElement('option');
          option.value = song.id;
          option.text = song.title;
          songSelect.appendChild(option);
        });
      }

  });
</script>

