<div class="min-h-screen">
  <h5 class="font-semibold font-courier uppercase text-md px-5 pt-10"><%= @quiz.title %>
    <% if @quiz.tour.status == 'open' %>
      <span> (closes at <%= @quiz.tour.quiz_live_time.in_time_zone(current_user.timezone).strftime('%I:%M %p') %>)
      </span>
    <% end %>
  </h5>

  <%= form_with(url: submit_quiz_path(@quiz.id), method: :post, local: true) do |f| %>
    <% @quiz.questions.order(:era).order(:position).all.group_by(&:era).each do |era, questions| %>
      <div class="mt-5 capitalize">
        <h1 class="<%= era_color(era) %> font-bold uppercase text-lg p-2 flex justify-center items-center"><%= era.humanize %></h1>
        <% questions.each_with_index do |question, index| %>
          <div class="flex flex-col  px-5 py-3 capitalize font-medium ">
            <p class="flex gap-2 justify-between gap-1 lg:text-base text-sm">
              <%= (index + 1).to_s.rjust(2, '0') %>. <%= question.content %> (worth <%= question.points %> points)
              <%= render 'components/drawer', button_icon: '', button_text: 'view history', title: "#{question.content} history", id: "#{question.id}_history", button_class: "#{era_text_color(question.era)} underline hover:scale-90 ml-7 capitalize font-normal text-xs" do %>
                <%= render 'questions/history_drawer', question: question %>
              <% end %>
            </p>
            <div class="grid <%= question&.choices&.first&.image&.attached? ? 'lg:grid-cols-6 grid-cols-2' : 'grid-cols-1' %> gap-4">
              <% question.choices.includes([image_attachment: :blob]).order(:position).each_with_index do |choice, index| %>
                <div class="choice py-3 flex flex-col gap-4">
                  <%= image_tag(choice.image, alt: "Option #{index + 1}", class: 'w-full h-72 object-cover object-center rounded') if choice.image.attached? %>
                  <div class="flex gap-2 items-center capitalize font-light">
                  <%= f.radio_button "selected_options[#{question.id}]", choice.id, required: true, class: (question.include_mashup? ? 'mashup-choice' : ''), data: { content: question.content, choice_content: choice.content, question_id: question.id } %>
                    <%= choice.content %>
                  </div>
                </div>
              <% end %>
              <% if question.include_album_and_song %>
                <div class="album-song-fields mt-4 grid grid-cols-2 gap-2 font-light" data-content="<%= question.id %>">
                </div>
              <% end %>
            </div>
          </div>
        <% end %>
      </div>
    <% end %>

    <div class="mt-10 flex justify-center">
      <%= f.submit "Submit Predictions", class: "dark:bg-black bg-gray-200 font-bold py-2 px-4 rounded lg:w-11/12 mb-2 dark:hover:bg-gray-900 hover:bg-gray-100 cursor-pointer" %>
    </div>
  <% end %>
</div>

<script>
  document.addEventListener("turbo:load", () => {
    document.querySelectorAll('.mashup-choice').forEach((element) => {
      updateAlbumsongSelects(element)
      element.addEventListener('change', (event) => {
        if (event.target.checked) {
          updateAlbumsongSelects(element)
        }
      });
    });

    function updateAlbumsongSelects(selectedElement) {
      const mashupType = selectedElement.dataset.choiceContent.toLowerCase();
      const container = selectedElement.parentElement.parentElement.parentElement.parentElement.nextElementSibling.children[3].children[0]
      const questionId = container.dataset.content
      const selectedElementQuestionId = selectedElement.dataset.questionId
      let numberOfFields;

      switch (mashupType) {
        case 'no mashup':
          numberOfFields = 1;
          break;
        case 'mashup (2 songs) ':
          numberOfFields = 2;
          break;
        case 'mashup (3 songs)':
          numberOfFields = 3;
          break;
        case 'mashup (4+ songs)':
          numberOfFields = 4;
          break;
        default:
          numberOfFields = 1;
      }

      container.innerHTML = '';

      const albumsPromise = getAlbums()

      for (let i = 0; i < numberOfFields; i++) {
        const albumSelect = document.createElement('select');
        albumSelect.name = `albums_${i}[${questionId}]`;

        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        if (mashupType === 'no mashup'){
          defaultOption.text = 'Select Album'
        } else {
          defaultOption.text = `Select Album ${i + 1}`
        }
        defaultOption.disabled = true;
        defaultOption.selected = true;
        albumSelect.appendChild(defaultOption);
        albumSelect.classList.add('dark:bg-black')
        albumSelect.required = true;

        albumSelect.classList.add('capitalize');
        albumsPromise.then(albums => {
          albums.forEach(album => {
            const option = document.createElement('option');
            option.value = album.id;
            option.text = album.title;
            albumSelect.appendChild(option);
          });
        }).catch(error => {
          console.error('Error fetching albums:', error);
        });

        const songSelect = document.createElement('select');

        const defaultSongOption = document.createElement('option');
        defaultSongOption.value = '';

        if (mashupType === 'no mashup'){
          defaultSongOption.text = 'Select  Song'
        } else {
          defaultSongOption.text = `Select Song ${i + 1}`
        }
        defaultSongOption.disabled = true;
        defaultSongOption.selected = true;

        songSelect.appendChild(defaultSongOption);
        songSelect.name = `songs_${i}[${questionId}]`;
        songSelect.classList.add('capitalize');
        songSelect.classList.add('dark:bg-black')
        songSelect.required = true;

        albumSelect.addEventListener('change', async (event) => {
          const selectedAlbumId = event.target.value;
          if (selectedAlbumId) {
            try {
              const songs = await getSongs(selectedAlbumId);
              updateSongOptions(songs, songSelect);
            } catch (error) {
              console.error('Error fetching songs:', error);
            }
          } else {
            // Clear songSelect options if no album is selected
            songSelect.innerHTML = '';
            songSelect.appendChild(defaultSongOption);
          }
        });

        container.appendChild(albumSelect);
        container.appendChild(songSelect);

      }

    }


    // Fetch albums data from your server or API
      function getAlbums() {
        return fetch('/albums', {
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
          }
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            return data;
          })
          .catch(error => {
            console.error('Error fetching albums:', error);
          });
      }

      // Function to fetch songs for a given album ID
      async function getSongs(albumId) {
        const response = await fetch(`/albums/${albumId}/songs`, {
          headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
          }
        });
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        return data;
      }

      // Function to update songSelect options based on fetched songs
      function updateSongOptions(songs, songSelect) {
        songSelect.innerHTML = '';
        songs.forEach(song => {
          const option = document.createElement('option');
          option.value = song.id;
          option.text = song.title;
          songSelect.appendChild(option);
        });
      }

  });
</script>
